import os


def create_folder(folder_name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏"""
    try:
        os.makedirs(folder_name)
        print(f"–ü–∞–ø–∫–∞ {folder_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
    except FileExistsError:
        print(f"–ü–∞–ø–∫–∞ {folder_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


def create_file_with_extension(file_name, extension):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º"""
    file_path = os.path.join(os.getcwd(), file_name + '.' + extension)
    with open(file_path, 'w') as f:
        print(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")


def main():
    name_project = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ")
    create_folder(f"{name_project}/handlers")  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    create_folder(f"{name_project}/keyboards")  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    create_folder(f"{name_project}/system")  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    create_folder(f"{name_project}/setting")  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏

    create_file_with_extension(f'{name_project}/requirements', 'txt')  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    create_file_with_extension(f'{name_project}/README', 'md')  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    create_file_with_extension(f'{name_project}/main', 'py')  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    create_file_with_extension(f'{name_project}/', 'gitignore')  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º

    create_file_with_extension(f'{name_project}/system/dispatcher', 'py')  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    create_file_with_extension(f'{name_project}/setting/config', 'ini')  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    create_file_with_extension(f'{name_project}/handlers/handlers', 'py')  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    create_file_with_extension(f'{name_project}/keyboards/keyboards', 'py')  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º

    # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø–∏—Å—å –∫–æ–¥–∞
    with open(f'{name_project}/system/dispatcher.py', 'w', encoding='utf-8') as file:
        code_lines = [
            'import configparser\n\n',
            'from aiogram import Bot, Dispatcher, Router\n',
            'from aiogram.fsm.storage.memory import MemoryStorage\n\n',
            'config = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)\n',
            'config.read("setting/config.ini")  # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–∏ÃÜ–ª–∞\n',
            'BOT_TOKEN = config["BOT_TOKEN"]["BOT_TOKEN"]\n\n',
            'bot = Bot(\n',
            '    token=BOT_TOKEN,\n',
            ')\n',
            'storage = MemoryStorage()  # –•—Ä–∞–Ω–∏–ª–∏—â–µ\n',
            'dp = Dispatcher(storage=storage)\n\n',
            'ADMIN_USER_ID = 535185511, 301634256\n\n',
            'router = Router()\n',
            'dp.include_router(router)\n'
        ]
        file.writelines(code_lines)

        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø–∏—Å—å –∫–æ–¥–∞
        with open(f'{name_project}/main.py', 'w', encoding='utf-8') as file:
            code_lines = [
                'import asyncio\n',
                'import logging\n',
                'import sys\n\n',

                'from loguru import logger\n',

                'from handlers.greeting_handlers import register_greeting_handler\n',
                'from system.dispatcher import dp, bot\n\n',

                'logger.add("logs/log.log", retention="1 days", enqueue=True)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n\n',

                'async def main() -> None:\n',
                '    await dp.start_polling(bot)\n',
                '    register_greeting_handler()\n\n',

                'if __name__ == "__main__":\n',
                '    logging.basicConfig(level=logging.INFO, stream=sys.stdout)\n',
                '    asyncio.run(main())\n\n',
            ]
            file.writelines(code_lines)

            # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø–∏—Å—å –∫–æ–¥–∞
            with open(f'{name_project}/handlers/handlers.py', 'w', encoding='utf-8') as file:
                code_lines = [
                    'from aiogram.filters import CommandStart\n',
                    'from aiogram.types import Message\n',
                    'from loguru import logger\n\n',

                    'from system.dispatcher import bot, dp\n\n',

                    '@dp.message(CommandStart())\n',
                    'async def command_start_handler(message: Message) -> None:\n',
                    '    user_id = message.from_user.id\n',
                    '    user_name = message.from_user.username\n',
                    '    user_first_name = message.from_user.first_name\n',
                    '    user_last_name = message.from_user.last_name\n',
                    '    user_date = message.date.strftime("%Y-%m-%d %H:%M:%S")\n',
                    '    logger.info(f"{user_id} {user_name} {user_first_name} {user_last_name} {user_date}")\n',

                    '    sign_up_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"\n',
                    '    await bot.send_message(message.from_user.id, sign_up_text, disable_web_page_preview=True)\n\n',

                    'def register_greeting_handler():\n',
                    '    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""\n',
                    '    dp.message.register(command_start_handler)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ–Ω –∂–µ –ø–æ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã\n\n',

                ]
                file.writelines(code_lines)


if __name__ == '__main__':
    main()
